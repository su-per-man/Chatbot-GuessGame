{"version":3,"sources":["chatMsg.js","messageStyle.js","App.js","serviceWorker.js","index.js"],"names":["ChatMsg","withStyles","palette","spacing","radius","size","avatar","width","height","leftRow","textAlign","rightRow","msg","padding","borderRadius","marginBottom","display","wordBreak","fontFamily","fontSize","left","borderTopRightRadius","borderBottomRightRadius","backgroundColor","grey","right","borderTopLeftRadius","borderBottomLeftRadius","color","common","white","leftFirst","leftLast","rightFirst","rightLast","name","props","classes","messages","side","GridContainerProps","GridItemProps","AvatarProps","getTypographyProps","Grid","container","justify","item","Avatar","src","className","cx","xs","map","i","index","TypographyProps","key","id","Typography","align","length","defaultProps","rand","Math","ceil","random","App","handleGuess","setState","chat","state","userGuess","attempt","temp","guess","parseInt","Fragment","Container","maxWidth","AppBar","elevation","position","Toolbar","variant","Box","my","this","py","style","InputBase","placeholder","flex","value","onChange","e","target","autoFocus","IconButton","onClick","Icon","React","Component","Boolean","window","location","hostname","match","theme","createMuiTheme","primary","main","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43548bb8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cx from 'clsx';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport defaultChatMsgStyles from './messageStyle';\r\n\r\nconst ChatMsg = withStyles(defaultChatMsgStyles, { name: 'ChatMsg' })(props => {\r\n    const {\r\n        classes,\r\n        avatar,\r\n        messages,\r\n        side,\r\n        GridContainerProps,\r\n        GridItemProps,\r\n        AvatarProps,\r\n        getTypographyProps,\r\n    } = props;\r\n    const attachClass = index => {\r\n        if (index === 0) {\r\n            return classes[`${side}First`];\r\n        }\r\n        if (index === messages.length - 1) {\r\n            return classes[`${side}Last`];\r\n        }\r\n        return '';\r\n    };\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={2}\r\n            justify={side === 'right' ? 'flex-end' : 'flex-start'}\r\n            {...GridContainerProps}\r\n        >\r\n            {side === 'left' && (\r\n                <Grid item {...GridItemProps}>\r\n                    <Avatar\r\n                        src={avatar}\r\n                        {...AvatarProps}\r\n                        className={cx(classes.avatar, AvatarProps.className)}\r\n                    />\r\n                </Grid>\r\n            )}\r\n            <Grid item xs={8}>\r\n                {messages.map((msg, i) => {\r\n                    const TypographyProps = getTypographyProps(msg, i, props);\r\n                    return (\r\n                        // eslint-disable-next-line react/no-array-index-key\r\n                        <div key={msg.id || i} className={classes[`${side}Row`]}>\r\n                            <Typography\r\n                                align={'left'}\r\n                                {...TypographyProps}\r\n                                className={cx(\r\n                                    classes.msg,\r\n                                    classes[side],\r\n                                    attachClass(i),\r\n                                    TypographyProps.className\r\n                                )}\r\n                            >\r\n                                {msg}\r\n                            </Typography>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nChatMsg.propTypes = {\r\n    avatar: PropTypes.string,\r\n    messages: PropTypes.arrayOf(PropTypes.string),\r\n    side: PropTypes.oneOf(['left', 'right']),\r\n    GridContainerProps: PropTypes.shape({}),\r\n    GridItemProps: PropTypes.shape({}),\r\n    AvatarProps: PropTypes.shape({}),\r\n    getTypographyProps: PropTypes.func,\r\n};\r\nChatMsg.defaultProps = {\r\n    avatar: '',\r\n    messages: [],\r\n    side: 'left',\r\n    GridContainerProps: {},\r\n    GridItemProps: {},\r\n    AvatarProps: {},\r\n    getTypographyProps: () => ({}),\r\n};\r\n\r\nexport default ChatMsg;","export default ({ palette, spacing }) => {\r\n    const radius = spacing(2.5)\r\n    const size = spacing(4)\r\n    const rightBgColor = '#09f'\r\n    return {\r\n        avatar: {\r\n            width: size,\r\n            height: size,\r\n        },\r\n        leftRow: {\r\n            textAlign: 'left',\r\n        },\r\n        rightRow: {\r\n            textAlign: 'right',\r\n        },\r\n        msg: {\r\n            padding: spacing(1, 2),\r\n            borderRadius: 4,\r\n            marginBottom: 4,\r\n            display: 'inline-block',\r\n            wordBreak: 'break-word',\r\n            fontFamily:\r\n                // eslint-disable-next-line max-len\r\n                '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\r\n            fontSize: '14px',\r\n        },\r\n        left: {\r\n            borderTopRightRadius: radius,\r\n            borderBottomRightRadius: radius,\r\n            backgroundColor: palette.grey[100],\r\n        },\r\n        right: {\r\n            borderTopLeftRadius: radius,\r\n            borderBottomLeftRadius: radius,\r\n            backgroundColor: rightBgColor,\r\n            color: palette.common.white,\r\n        },\r\n        leftFirst: {\r\n            borderTopLeftRadius: radius,\r\n        },\r\n        leftLast: {\r\n            borderBottomLeftRadius: radius,\r\n        },\r\n        rightFirst: {\r\n            borderTopRightRadius: radius,\r\n        },\r\n        rightLast: {\r\n            borderBottomRightRadius: radius,\r\n        },\r\n    };\r\n};","import React from 'react';\nimport { Box, InputBase, Container, AppBar, Toolbar, Typography, IconButton, Icon } from '@material-ui/core'\nimport ChatMsg from './chatMsg'\n\nconst rand = Math.ceil(1 + Math.random() * 99)\nexport default class App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      chat: [<ChatMsg avatar={''} messages={['Hey There!',\n        'Myself Natasha ',\n        'Let\\'s play a game',\n        'Guess a number between 1 and 100']} />],\n      userGuess: '',\n      attempt: 0\n    }\n  }\n  handleGuess = () => {\n    this.setState({\n      chat:\n        [...this.state.chat, <ChatMsg side={'right'} messages={[this.state.userGuess]} />],\n      attempt: this.state.attempt + 1,\n    }, () => {\n      let temp = null\n      let guess = parseInt(this.state.userGuess)\n      switch (true) {\n        case (guess > rand):\n          temp = <ChatMsg avatar={''} messages={['Try smaller number']} />\n          break;\n        case (guess < rand):\n          temp = <ChatMsg avatar={''} messages={['Try bigger number']} />\n          break;\n        case (guess === rand):\n          temp = <ChatMsg avatar={''} messages={['That\\'s correct!!', 'You have taken only ' + this.state.attempt + ' attempts to crack it']} />\n          break;\n        default:\n          temp = <ChatMsg avatar={''} messages={['Oops! Please enter a number']} />\n      }\n      this.setState({\n        chat: [...this.state.chat, temp],\n        userGuess: ''\n      })\n    })\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Container maxWidth=\"xs\">\n          <AppBar elevation={0} position=\"static\" color=\"primary\" >\n            <Toolbar variant=\"dense\">\n              <Typography>Hack Natasha's Mind</Typography>\n            </Toolbar>\n          </AppBar>\n          <Box my={3}>\n            {this.state.chat}\n          </Box>\n\n          <Box py={1} style={{ display: \"flex\" }}>\n            <InputBase placeholder=\"Guess a number\" style={{ flex: 2 }} value={this.state.userGuess}\n              onChange={(e) => this.setState({\n                userGuess: e.target.value\n              })} autoFocus />\n            <IconButton color=\"primary\" onClick={this.handleGuess}>\n              <Icon>send</Icon>\n            </IconButton>\n          </Box>\n        </Container>\n      </React.Fragment >\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#09f\" // This is an orange looking color\n    }\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}